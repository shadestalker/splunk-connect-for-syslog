# Cisco UCM
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_UCM" "parser" "cisco_ucm" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_cisco_ucm {
    message("^%UC\_")
    or 
    message("^%CCM\_")
};

filter f_cisco_ucm_message {
    message(
#        '^(<\d{1,3}>)\d*: (?:([^:]+): )?(.*[A|P]M\.\d{3}) (\w{3}) : (%.*)'
#       '^(<\d{1,3}>)\d*: (?:([^:]+): )?(.*) : (%.*)'
        '^(<\d{1,3}>)\d*: (?:([^:]+): )?(\w{3} \d{1,2} (\d{4} )?\d\d:\d\d:\d\d(?: [AP]M)?(\.\d{3,6})?)([^:]*): (%[A-Z].*)'
        flags(store-matches)
    );
};

parser p_cisco_ucm_date {
                date-parser-nofilter(format(
                    '%b %d %H:%M:%S.%f',
                    '%b %d %Y %I:%M:%S %p.%f'
                    )
                    template("$3"));
};

rewrite r_cisco_ucm_message {
    set("cisco_ucm" value("fields.sc4s_syslog_format"));
    set("cisco_ucm" value("fields.sc4s_vendor_product"));
    set("$HOST_FROM" value("HOST") );
    set("$2" value("HOST") condition(match("^..." template("${2}"))) );
    set("$7" value("MESSAGE"));
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_UCM_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_UCM_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_UCM_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_UCM traffic
            source (s_CISCO_UCM);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CISCO_UCM traffic
            source (s_DEFAULT);
            filter(f_cisco_ucm);
            flags(final);
        };
    };

    if {
        filter {
            message(
                'Node ?ID(?:\:|\=)([^ \]]+)'
                flags(store-matches)
            );
        };
        rewrite {
            set("$1" value("HOST") );
        };
    } elif {
        filter {
            message(
                ' on node ([^ ]+\. |[^ ]+ )'
                flags(store-matches)
            );
        };
        rewrite {
            set("$1" value("HOST") );
        };
    };

    rewrite {
        set("cisco_ucm", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("cisco:ucm"))
    };
    parser {p_add_context_splunk(key("cisco_ucm")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_UCM_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_UCM" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_UCM_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_UCM_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
