# Infoblox
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "INFOBLOX" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_infoblox {
    match("^infoblox", value("fields.sc4s_vendor_product"));
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_INFOBLOX_TCP_PORT")) (getenv  (print "SC4S_LISTEN_INFOBLOX_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_INFOBLOX_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for INFOBLOX traffic
            source (s_INFOBLOX);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for INFOBLOX traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_infoblox);
            flags(final);
        };
    };

    if {
        filter{program("named")};
        rewrite {
            set("infoblox_dns", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:dns"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("infoblox_dns")); };
    } elif {
        filter{program("dhcpd")};
        rewrite {
            set("infoblox_dhcp", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:dhcp"),  source("program:${.PROGRAM}"))
        };
        parser {  p_add_context_splunk(key("infoblox_dhcp")); };
    } elif {
        filter{program("threat-protect-log")};
        rewrite {
            set("infoblox_threat", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:threat"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("infoblox_threat")); };
    } else {
        rewrite {
            set("nix_syslog", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("nix_syslog")); };
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_INFOBLOX_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_INFOBLOX" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_INFOBLOX_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_INFOBLOX_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
