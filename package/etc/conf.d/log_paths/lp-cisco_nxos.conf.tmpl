# Cisco NX_OS
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_NX_OS" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_cisco_nx_os {
    match("cisco_nx_os", value("fields.sc4s_vendor_product") type(glob) )
        or program('^%ACLMGR-\d*-')
    or program('^%ACLQOS-SLOT\d*-\d*-')
    or program('^%AFM-\d*-')
    or program('^%ARP-\d*-')
    or program('^%AUTHPRIV-\d*-')
    or program('^%COPP-\d*-')
    or program('^%DAEMON-\d*-')
    or program('^%EEM_ACTION-\d*-')
    or program('^%EIGRP-\d*-')
    or program('^%ETHPORT-\d*-')
    or program('^%ETH_PORT_CHANNEL-\d*-')
    or program('^%IGMP-\d*-')
    or program('^%IM-\d*-')
    or program('^%INTERFACE_VLAN-\d*-')
    or program('^%KERN-\d*-')
    or program('^%L2FM-\d*-')
    or program('^%LIBIFMGR-\d*-')
    or program('^%LICMGR-\d*-')
    or program('^%LOCAL\d*-\d*-')
    or program('^%M2FIB-SLOT\d*-\d*-')
    or program('^%METROPOLIS_USD-SLOT')
    or program('^%MODULE-\d*-')
    or program('^%NOHMS-\d*-')
    or program('^%NTP-\d*-')
    or program('^%PFMA-\d*-')
    or program('^%PLATFORM-\d*-')
    or program('^%SYSMGR-STANDBY-\d*-')
    or program('^%SYSMGR-\d*-')
    or program('^%TACACS-\d*-')
    or program('^%USBHSD-\d*-')
    or program('^%USER-\d*-')
    or program('^%VIM-\d*-')
    or program('^%VPC-\d*-')
    or program('^%VSHD-\d*-')      ;
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_NX_OS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_NX_OS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_NX_OS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_NX_OS traffic
            source (s_CISCO_NX_OS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CISCO_NX_OS traffic
            source (s_DEFAULT);
            filter(f_cisco_nx_os);
            flags(final);
        };
    };

    rewrite {
        set("cisco_nxos", value("fields.sc4s_vendor_product"));
        guess-time-zone();
        r_set_splunk_dest_default(sourcetype("cisco:ios"),  template("t_hdr_msg"))
    };

    parser { p_add_context_splunk(key("cisco_nx_os")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_program_nopid_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_NXOS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_NXOS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_NXOS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_NXOS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
